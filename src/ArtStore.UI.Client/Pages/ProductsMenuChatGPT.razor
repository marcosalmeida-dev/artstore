@page "/product-menu-chatgpt"

@using System.Globalization

<MudContainer MaxWidth="MaxWidth.Large" Class="py-6">
    <MudPaper Class="p-6 mx-auto rounded-2xl" Elevation="3">
        <div class="flex flex-col gap-4">
            <div class="flex items-center justify-between gap-4 flex-wrap">
                <div class="flex items-center gap-3">
                    <MudAvatar Size="Size.Large" Class="rounded-2xl" Image="https://images.unsplash.com/photo-1540189549336-e6e99c3679fe?q=80&w=400&auto=format&fit=crop" />
                    <div>
                        <MudText Typo="Typo.h4" Class="font-semibold">@T("Title")</MudText>
                        <MudText Typo="Typo.body2" Class="opacity-70">@T("Subtitle")</MudText>
                    </div>
                </div>

                <!-- Language selector (flag buttons) -->
                <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined" Class="rounded-2xl">
                    <MudButton OnClick="@(()=>SetLanguage("en-US"))" Class="@LangBtnClass("en-US")" StartIcon="@GetFlagSvg("en-US")">EN</MudButton>
                    <MudButton OnClick="@(()=>SetLanguage("pt-BR"))" Class="@LangBtnClass("pt-BR")" StartIcon="@GetFlagSvg("pt-BR")">PT</MudButton>
                    <MudButton OnClick="@(()=>SetLanguage("es-AR"))" Class="@LangBtnClass("es-AR")" StartIcon="@GetFlagSvg("es-AR")">ES</MudButton>
                </MudButtonGroup>
            </div>

            <!-- Category chips -->
            <MudChipSet T="string" @bind-SelectedValue="SelectedCategory" SelectionMode="SelectionMode.SingleSelection" Class="flex flex-wrap gap-2">
                @foreach (var cat in LocalizedCategories)
                {
                    <MudChip T="string"
                             Color="@(SelectedCategory==cat.Key ? Color.Primary : Color.Default)"
                             Variant="Variant.Outlined"
                             Value="@cat.Key">
                        @cat.Value
                    </MudChip>
                }
                <MudChip T="string"
                         Color="@(SelectedCategory==null ? Color.Primary : Color.Default)"
                         Variant="Variant.Outlined"
                         Value="@null">
                    @T("All")
                </MudChip>
            </MudChipSet>

            @foreach (var group in VisibleGroups)
            {
                <MudText Typo="Typo.h5" Class="mt-4 mb-2 font-semibold">@LocalizedCategories[group.Key]</MudText>
                <MudDivider Class="mb-4" />
                <MudGrid>
                    @foreach (var p in group)
                    {
                        <MudItem xs="12" sm="6" md="4" lg="3">
                            <MudCard Class="h-full rounded-2xl overflow-hidden hover-elevate">
                                <MudCardMedia Image="@p.ImageUrl" Height="150" />
                                <MudCardContent Class="flex flex-col gap-1">
                                    <MudText Typo="Typo.h6" Class="font-semibold">@PName(p)</MudText>
                                    <MudText Typo="Typo.body2" Class="opacity-80 line-clamp-3">@PDesc(p)</MudText>
                                </MudCardContent>
                                <MudCardActions Class="px-4 pb-4 pt-0 flex items-center justify-between">
                                    <MudText Typo="Typo.subtitle1" Class="font-semibold">@FormatPrice(p.Price)</MudText>
                                    <MudTooltip Text="@T("AddTooltip")">
                                        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.AddShoppingCart">
                                            @T("Add")
                                        </MudButton>
                                    </MudTooltip>
                                </MudCardActions>
                            </MudCard>
                        </MudItem>
                    }
                </MudGrid>
            }
        </div>
    </MudPaper>
</MudContainer>

@code {
    // ===== Model (as provided) =====
    public class ProductModel
    {
        public int Id { get; set; }
        public string? Name { get; set; }           // ignored at runtime; using localized map below
        public string? Description { get; set; }    // ignored at runtime; using localized map below
        public string Category { get; set; } = "";
        public string? Brand { get; set; }
        public string? Unit { get; set; }
        public decimal Price { get; set; }
        public string ImageUrl { get; set; } = "";
        public int Quantity { get; set; }
    }

    // ===== Language & localization =====
    private string _lang = "en-US";
    private CultureInfo Culture => CultureInfo.GetCultureInfo(_lang);

    // UI translations
    private readonly Dictionary<string, Dictionary<string, string>> UI = new()
    {
        ["en-US"] = new()
        {
            ["Title"] = "Restaurant Menu",
            ["Subtitle"] = "Made with local ingredients — enjoy!",
            ["Add"] = "Add",
            ["AddTooltip"] = "Add this item",
            ["All"] = "All",
            ["cat_starters"] = "Starters",
            ["cat_mains"]    = "Mains",
            ["cat_drinks"]   = "Drinks",
            ["cat_desserts"] = "Desserts"
        },
        ["pt-BR"] = new()
        {
            ["Title"] = "Cardápio",
            ["Subtitle"] = "Feito com ingredientes locais — aproveite!",
            ["Add"] = "Adicionar",
            ["AddTooltip"] = "Adicionar este item",
            ["All"] = "Tudo",
            ["cat_starters"] = "Entradas",
            ["cat_mains"]    = "Pratos Principais",
            ["cat_drinks"]   = "Bebidas",
            ["cat_desserts"] = "Sobremesas"
        },
        ["es-AR"] = new()
        {
            ["Title"] = "Menú",
            ["Subtitle"] = "Hecho con ingredientes locales — ¡buen provecho!",
            ["Add"] = "Agregar",
            ["AddTooltip"] = "Agregar este plato",
            ["All"] = "Todos",
            ["cat_starters"] = "Entradas",
            ["cat_mains"]    = "Platos Principales",
            ["cat_drinks"]   = "Bebidas",
            ["cat_desserts"] = "Postres"
        }
    };

    private string T(string key)
        => UI.TryGetValue(_lang, out var dict) && dict.TryGetValue(key, out var val) ? val : key;

    // ===== Sample data with per-language product translations =====
    private List<ProductModel> Products = new()
    {
        new(){ Id=1, Category="cat_starters", Price=29.90m, ImageUrl="https://images.unsplash.com/photo-1551183053-bf91a1d81141?q=80&w=800&auto=format&fit=crop", Quantity=1 },
        new(){ Id=2, Category="cat_starters", Price=26.00m, ImageUrl="https://images.unsplash.com/photo-1552332386-f8dd00dc2f85?q=80&w=800&auto=format&fit=crop", Quantity=1 },
        new(){ Id=3, Category="cat_mains",    Price=64.00m, ImageUrl="https://images.unsplash.com/photo-1544025162-d76694265947?q=80&w=800&auto=format&fit=crop", Quantity=1 },
        new(){ Id=4, Category="cat_mains",    Price=58.00m, ImageUrl="https://images.unsplash.com/photo-1604908554007-62c9e7d2a3f0?q=80&w=800&auto=format&fit=crop", Quantity=1 },
        new(){ Id=5, Category="cat_drinks",   Price=17.00m, ImageUrl="https://images.unsplash.com/photo-1551024709-8f23befc6cf7?q=80&w=800&auto=format&fit=crop", Quantity=1 },
        new(){ Id=6, Category="cat_drinks",   Price=22.00m, ImageUrl="https://images.unsplash.com/photo-1541976076758-347942db197a?q=80&w=800&auto=format&fit=crop", Quantity=1 },
        new(){ Id=7, Category="cat_desserts", Price=24.00m, ImageUrl="https://images.unsplash.com/photo-1541976076758-e5d0361f30b1?q=80&w=800&auto=format&fit=crop", Quantity=1 },
        new(){ Id=8, Category="cat_desserts", Price=27.00m, ImageUrl="https://images.unsplash.com/photo-1551024709-8f23befc6cf7?q=80&w=800&auto=format&fit=crop", Quantity=1 },
    };

    // Per-product localized name/description
    private record L10n(string Name, string Description);
    private readonly Dictionary<(string Lang, int ProductId), L10n> PText = new()
    {
        // Starters
        [("en-US",1)] = new("Bruschetta", "Grilled bread topped with ripe tomatoes, garlic, basil, and olive oil."),
        [("pt-BR",1)] = new("Bruschetta", "Pão grelhado com tomates maduros, alho, manjericão e azeite."),
        [("es-AR",1)] = new("Bruschetta", "Pan grillado con tomates maduros, ajo, albahaca y aceite de oliva."),

        [("en-US",2)] = new("Pumpkin Soup", "Silky roasted pumpkin soup finished with cream and toasted seeds."),
        [("pt-BR",2)] = new("Sopa de Abóbora", "Sopa cremosa de abóbora assada, finalizada com creme e sementes torradas."),
        [("es-AR",2)] = new("Sopa de Calabaza", "Sopa sedosa de calabaza asada con crema y semillas tostadas."),

        // Mains
        [("en-US",3)] = new("Herb-Grilled Salmon", "Fresh salmon filet, lemon butter sauce, seasonal vegetables."),
        [("pt-BR",3)] = new("Salmão Grelhado com Ervas", "Filé de salmão fresco, molho de manteiga e limão, legumes da estação."),
        [("es-AR",3)] = new("Salmón a la Parrilla con Hierbas", "Filete de salmón, salsa de manteca y limón, verduras de estación."),

        [("en-US",4)] = new("Mushroom Risotto (V)", "Arborio rice, wild mushrooms, parmesan, white wine reduction."),
        [("pt-BR",4)] = new("Risoto de Cogumelos (V)", "Arroz arbório, cogumelos selvagens, parmesão e vinho branco."),
        [("es-AR",4)] = new("Risotto de Hongos (V)", "Arroz arborio, hongos silvestres, parmesano y vino blanco."),

        // Drinks
        [("en-US",5)] = new("House Lemonade", "Freshly squeezed lemons, sparkling water, and a hint of mint."),
        [("pt-BR",5)] = new("Limonada da Casa", "Limões espremidos na hora, água com gás e um toque de hortelã."),
        [("es-AR",5)] = new("Limonada de la Casa", "Limones recién exprimidos, agua con gas y un toque de menta."),

        [("en-US",6)] = new("Cold Brew Coffee", "Slow-steeped specialty coffee, naturally sweet and smooth."),
        [("pt-BR",6)] = new("Cold Brew", "Café especial extraído a frio, naturalmente doce e suave."),
        [("es-AR",6)] = new("Café Cold Brew", "Café de especialidad extraído en frío, dulce y suave."),

        // Desserts
        [("en-US",7)] = new("Chocolate Mousse", "Dark chocolate mousse with sea salt and whipped cream."),
        [("pt-BR",7)] = new("Mousse de Chocolate", "Mousse de chocolate meio amargo com flor de sal e chantilly."),
        [("es-AR",7)] = new("Mousse de Chocolate", "Mousse de chocolate amargo con sal marina y crema batida."),

        [("en-US",8)] = new("Crème Brûlée", "Classic vanilla custard with caramelized sugar crust."),
        [("pt-BR",8)] = new("Crème Brûlée", "Clássico creme de baunilha com crosta de açúcar caramelizado."),
        [("es-AR",8)] = new("Crème Brûlée", "Clásica crema de vainilla con crocante de azúcar caramelizado."),
    };

    // Localized category labels (computed)
    private Dictionary<string,string> LocalizedCategories
        => new()
        {
            ["cat_starters"] = T("cat_starters"),
            ["cat_mains"]    = T("cat_mains"),
            ["cat_drinks"]   = T("cat_drinks"),
            ["cat_desserts"] = T("cat_desserts"),
        };

    // Filtering/grouping
    private string? SelectedCategory = null;

    private IEnumerable<IGrouping<string, ProductModel>> VisibleGroups =>
        Products
            .Where(p => SelectedCategory == null || p.Category == SelectedCategory)
            .GroupBy(p => p.Category)
            .OrderBy(g => g.Key); // consistent order

    // ===== Helpers =====
    private void SetLanguage(string lang)
    {
        _lang = lang;
        StateHasChanged();
    }

    private string LangBtnClass(string lang)
        => _lang == lang ? "font-semibold" : "";

    private string PName(ProductModel p)
        => PText.TryGetValue((_lang, p.Id), out var l10n) ? l10n.Name : (p.Name ?? $"Product {p.Id}");

    private string PDesc(ProductModel p)
        => PText.TryGetValue((_lang, p.Id), out var l10n) ? l10n.Description : (p.Description ?? "");

    private string FormatPrice(decimal price)
    {
        // Choose a representative currency for each locale
        var currency = _lang switch
        {
            "pt-BR" => new RegionInfo("pt-BR").ISOCurrencySymbol, // BRL
            "es-AR" => new RegionInfo("es-AR").ISOCurrencySymbol, // ARS
            _       => new RegionInfo("en-US").ISOCurrencySymbol  // USD
        };

        // Format amount using the selected culture and inject currency symbol
        // Using "C" already applies symbol of Culture; this ensures locale-appropriate display.
        return price.ToString("C", Culture);
    }

    private string GetFlagSvg(string lang) => lang switch
    {
        "en-US" => "<svg width='24' height='16' viewBox='0 0 24 16'><rect width='24' height='16' fill='#b22234'/><g><rect y='2' width='24' height='2' fill='#fff'/><rect y='6' width='24' height='2' fill='#fff'/><rect y='10' width='24' height='2' fill='#fff'/><rect y='14' width='24' height='2' fill='#fff'/></g><rect width='10' height='8' fill='#3c3b6e'/><g fill='#fff'><circle cx='2' cy='2' r='0.7'/><circle cx='5' cy='2' r='0.7'/><circle cx='8' cy='2' r='0.7'/><circle cx='2' cy='5' r='0.7'/><circle cx='5' cy='5' r='0.7'/><circle cx='8' cy='5' r='0.7'/><circle cx='2' cy='7' r='0.7'/><circle cx='5' cy='7' r='0.7'/><circle cx='8' cy='7' r='0.7'/></g></svg>",
        "pt-BR" => "<svg width='24' height='16' viewBox='0 0 24 16'><rect width='24' height='16' fill='#009B3A'/><polygon points='12,2 22,8 12,14 2,8' fill='#FFDF00'/><circle cx='12' cy='8' r='4.5' fill='#002776'/><defs><clipPath id='orb-brazil'><circle cx='12' cy='8' r='4.5'/></clipPath></defs><g clip-path='url(#orb-brazil)'><path d='M-2 7A18 14 0 0 1 26 9' fill='none' stroke='#FFFFFF' stroke-width='1.6' transform='rotate(-12 12 8)'/></g></svg>",
        "es-AR" => "<svg width='24' height='16' viewBox='0 0 24 16'><rect width='24' height='16' fill='#74acdf'/><rect y='5' width='24' height='6' fill='#fff'/><circle cx='12' cy='8' r='2' fill='#f6b40e'/></svg>",
        _ => ""
    };

}
