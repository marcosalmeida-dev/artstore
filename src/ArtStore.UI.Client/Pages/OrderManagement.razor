@page "/order-management"

@using ArtStore.Shared.DTOs.Order.Events
@using Microsoft.AspNetCore.SignalR.Client
@using ArtStore.Shared.DTOs.Order
@using ArtStore.Shared.DTOs.Order.Commands
@using ArtStore.Shared.Models.Enums
@using ArtStore.UI.Client.Services
@using MudBlazor

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <div class="d-flex justify-space-between align-center mb-4">
        <MudText Typo="Typo.h4">Gerenciamento de Pedidos</MudText>
        <MudChip T="string" Color="Color.Info" Size="Size.Medium">
            Atualizações: @_updateOrderCount
        </MudChip>
    </div>

    @if (Orders == null)
    {
        <div class="d-flex justify-center">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        </div>
    }
    else if (!Orders.Any())
    {
        <MudAlert Severity="Severity.Info">
            Nenhum pedido encontrado.
        </MudAlert>
    }
    else
    {
        <MudDropContainer T="OrderDto" @ref="_dropContainer" Items="@Orders" ItemsSelector="@((item,column) => GetOrderStatus(item.Status) == column)" ItemDropped="OnOrderDropped" Class="d-flex flex-row">
            <ChildContent>
                @foreach (var section in _kanbanSections)
                {
                    <MudPaper Elevation="0" Width="350px" MinHeight="600px" Class="pa-4 ma-2 d-flex flex-column mud-background-gray rounded-lg">
                        <MudToolBar Gutters="false" Class="@GetSectionHeaderClass(section.Status)">
                            <MudIcon Icon="@GetSectionIcon(section.Status)" Class="mr-2" />
                            <MudText Typo="Typo.h6" Style="color: white;"><b>@(section.Name)</b></MudText>
                            <MudSpacer />
                            <MudChip T="string" Color="Color.Surface" Size="Size.Small" Style="color: black; font-weight: bold;">
                                @GetOrdersByStatus(section.Status).Count()
                            </MudChip>
                        </MudToolBar>
                        <MudDropZone T="OrderDto" Identifier="@GetOrderStatus(section.Status)" Class="mud-height-full py-2" />
                    </MudPaper>
                }
            </ChildContent>
            <ItemRenderer>
                <MudPaper Elevation="4" Class="@($"pa-3 ma-2 rounded-lg {GetOrderCardCssClass(context.Status)}")">
                    <div class="d-flex justify-space-between align-center mb-2">
                        <MudText Typo="Typo.subtitle1" Class="font-weight-bold">
                            #@context.OrderNumber
                        </MudText>
                        <MudChip T="string" Color="Color.Default" Size="Size.Small" Variant="Variant.Outlined">
                            @context.OrderSource
                        </MudChip>
                    </div>

                    <MudText Typo="Typo.caption" Class="mud-text-secondary mb-2">
                        @context.OrderDate.ToString("dd/MM/yyyy HH:mm")
                    </MudText>

                    <MudDivider Class="my-2" />

                    <div class="mb-3">
                        <MudText Typo="Typo.body2" Class="font-weight-medium">@context.CustomerName</MudText>
                        <MudText Typo="Typo.caption" Class="mud-text-secondary">@context.CustomerEmail</MudText>
                    </div>

                    <div class="mb-3">
                        <MudText Typo="Typo.caption" Class="mud-text-secondary mb-1">
                            Itens: @context.OrderDetails.Sum(d => d.Quantity) | Total: @context.TotalAmount.ToString("C")
                        </MudText>

                        @if (context.OrderDetails.Any())
                        {
                            <div style="max-height: 120px; overflow-y: auto;">
                                @foreach (var item in context.OrderDetails.Take(3))
                                {
                                    <MudText Typo="Typo.caption" Class="d-block">
                                        @($"{item.Quantity}x {item.ProductName}")
                                    </MudText>
                                }
                                @if (context.OrderDetails.Count() > 3)
                                {
                                    <MudText Typo="Typo.caption" Class="mud-text-secondary">
                                        +@(context.OrderDetails.Count() - 3) mais...
                                    </MudText>
                                }
                            </div>
                        }
                    </div>

                    <div class="d-flex justify-space-between align-center">
                        @if (CanMoveToNextStatus(context.Status))
                        {
                            <MudButton Size="Size.Small"
                                       Variant="Variant.Filled"
                                       Color="@GetNextStatusButtonColor(context.Status)"
                                       StartIcon="@GetStatusActionIcon(context.Status)"
                                       OnClick="@(() => MoveOrderToNextStatus(context))"
                                       Disabled="@isUpdating">
                                @GetStatusActionText(context.Status)
                            </MudButton>
                        }
                        else
                        {
                            <MudSpacer />
                        }
                    </div>
                </MudPaper>
            </ItemRenderer>
        </MudDropContainer>
    }
</MudContainer>

@inject NavigationManager Navigation
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject OrderService OrderService

<style>
    :root {
        --confirmed-color: #2196F3;
        --confirmed-color-dark: #1976D2;
        --processing-color: #FF9800;
        --processing-color-dark: #F57C00;
        --shipped-color: #4CAF50;
        --shipped-color-dark: #388E3C;
    }

    .order-card {
        transition: transform 0.2s ease, box-shadow 0.2s ease;
        cursor: grab;
        border-left: 4px solid var(--mud-palette-primary);
    }

    .order-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 16px rgba(0, 0, 0, 0.2);
    }

    .order-card-confirmed {
        border-left: 4px solid var(--confirmed-color) !important;
    }

    .order-card-processing {
        border-left: 4px solid var(--processing-color) !important;
    }

    .order-card-shipped {
        border-left: 4px solid var(--shipped-color) !important;
    }

    .confirmed-section-header {
        background: linear-gradient(135deg, var(--confirmed-color) 0%, var(--confirmed-color-dark) 100%);
        border-radius: 8px;
        color: white !important;
    }

    .processing-section-header {
        background: linear-gradient(135deg, var(--processing-color) 0%, var(--processing-color-dark) 100%);
        border-radius: 8px;
        color: white !important;
    }

    .shipped-section-header {
        background: linear-gradient(135deg, var(--shipped-color) 0%, var(--shipped-color-dark) 100%);
        border-radius: 8px;
        color: white !important;
    }

    @@media (max-width: 960px) {
        .d-flex.flex-row {
            flex-direction: column;
        }

        .mud-paper[width="350px"] {
            width: 100% !important;
            margin: 4px 0 !important;
        }
    }
</style>

@code {
    private MudDropContainer<OrderDto> _dropContainer = null!;

    public List<OrderDto>? Orders { get; set; }
    private bool isUpdating = false;

    private int _updateOrderCount = 0;

    private HubConnection? _hubConnection;

    // Kanban sections definition
    private readonly List<KanbanSection> _kanbanSections = new()
    {
        new KanbanSection("Confirmados", OrderStatus.Confirmed),
        new KanbanSection("Em Processamento", OrderStatus.Processing),
        new KanbanSection("Enviados", OrderStatus.Shipped)
    };

    public class KanbanSection
    {
        public string Name { get; init; }
        public OrderStatus Status { get; init; }

        public KanbanSection(string name, OrderStatus status)
        {
            Name = name;
            Status = status;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/orderManagementHub"))
            .Build();

        _hubConnection.On<OrderCreatedEvent>("OrderCreated", async (orderCreatedEvent) =>
        {
            Snackbar.Add($"Pedido #{orderCreatedEvent.OrderNumber} criado com sucesso!", Severity.Success);

            // Reload orders to include the new order in the kanban board
            await LoadOrdersAsync();

            // Refresh the drop container to ensure proper rendering
            await InvokeAsync(() =>
            {
                _dropContainer?.Refresh();
                StateHasChanged();
            });
        });

        _hubConnection.On<OrderStatusChangedEvent>("OrderStatusChanged", async (orderStatusChangedEvent) =>
        {
            _updateOrderCount++;
            var updatedOrderItem = Orders?.Where(w => w.Id == orderStatusChangedEvent.OrderId).FirstOrDefault();
            if (updatedOrderItem is not null)
            {
                var oldStatus = updatedOrderItem.Status;
                updatedOrderItem.Status = orderStatusChangedEvent.NewStatus;

                // Refresh kanban board to reflect status change
                await InvokeAsync(() =>
                {
                    _dropContainer?.Refresh();
                    StateHasChanged();
                });

                Snackbar.Add(
                    $"Status do pedido #{orderStatusChangedEvent.OrderNumber} alterado para {GetStatusText(orderStatusChangedEvent.NewStatus)}.",
                    Severity.Info
                );
            }
            else
            {
                Snackbar.Add($"Pedido #{orderStatusChangedEvent.OrderNumber} atualizado e não encontrado!", Severity.Warning);

                // If order not found locally, reload all orders to sync with server
                await LoadOrdersAsync();
                await InvokeAsync(() =>
                {
                    _dropContainer?.Refresh();
                    StateHasChanged();
                });
            }
        });

        await LoadOrdersAsync();
        await _hubConnection.StartAsync();
    }

    // MudDropContainer event handler
    private async Task OnOrderDropped(MudItemDropInfo<OrderDto> dropInfo)
    {
        if (isUpdating) return;

        try
        {
            isUpdating = true;

            var newStatus = ParseOrderStatus(dropInfo.DropzoneIdentifier);

            if (newStatus != dropInfo.Item.Status && IsValidStatusTransition(dropInfo.Item.Status, newStatus))
            {
                await UpdateOrderStatusInternal(dropInfo.Item, newStatus);
            }
            else if (newStatus != dropInfo.Item.Status)
            {
                Snackbar.Add("Transição de status não permitida", Severity.Warning);
                _dropContainer?.Refresh();
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error dropping order: {ex.Message}");
            Snackbar.Add("Erro ao atualizar status do pedido", Severity.Error);
            _dropContainer?.Refresh();
        }
        finally
        {
            isUpdating = false;
        }
    }

    private async Task LoadOrdersAsync()
    {
        try
        {
            Orders = await OrderService.GetOrdersAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Handle exceptions (e.g., log error, show message)
            Console.Error.WriteLine($"Error loading orders: {ex.Message}");
        }
    }


    private Color GetStatusColor(OrderStatus status)
    {
        return status switch
        {
            OrderStatus.Pending => Color.Warning,
            OrderStatus.Confirmed => Color.Info,
            OrderStatus.Processing => Color.Primary,
            OrderStatus.Shipped => Color.Secondary,
            OrderStatus.Delivered => Color.Success,
            OrderStatus.Cancelled => Color.Error,
            OrderStatus.Refunded => Color.Dark,
            _ => Color.Default
        };
    }

    private string GetStatusText(OrderStatus status)
    {
        return status switch
        {
            OrderStatus.Pending => "Pendente",
            OrderStatus.Confirmed => "Confirmado",
            OrderStatus.Processing => "Processando",
            OrderStatus.Shipped => "Enviado",
            OrderStatus.Delivered => "Entregue",
            OrderStatus.Cancelled => "Cancelado",
            OrderStatus.Refunded => "Reembolsado",
            _ => status.ToString()
        };
    }

    private string GetPaymentIcon(PaymentMethodType paymentMethod)
    {
        return paymentMethod switch
        {
            PaymentMethodType.None => Icons.Material.Filled.HelpOutline,
            PaymentMethodType.Cash => Icons.Material.Filled.Money,
            PaymentMethodType.DebitCard => Icons.Material.Filled.Payment,
            PaymentMethodType.CreditCard => Icons.Material.Filled.CreditCard,
            PaymentMethodType.Bitcoin => Icons.Material.Filled.CurrencyBitcoin,
            PaymentMethodType.USDT => Icons.Material.Filled.AttachMoney,
            _ => Icons.Material.Filled.Payment
        };
    }

    private string GetPaymentMethodText(PaymentMethodType paymentMethod)
    {
        return paymentMethod switch
        {
            PaymentMethodType.None => "Não definido",
            PaymentMethodType.Cash => "Dinheiro",
            PaymentMethodType.DebitCard => "Cartão de Débito",
            PaymentMethodType.CreditCard => "Cartão de Crédito",
            PaymentMethodType.Bitcoin => "Bitcoin",
            PaymentMethodType.USDT => "USDT",
            _ => paymentMethod.ToString()
        };
    }

    private async Task UpdateOrderStatus(OrderDto order)
    {
        try
        {
            isUpdating = true;
            var newStatus = order.Status switch
            {
                OrderStatus.Confirmed => OrderStatus.Processing,
                OrderStatus.Processing => OrderStatus.Shipped,
                _ => order.Status
            };

            if (newStatus != order.Status)
            {
                var command = new UpdateOrderStatusCommand
                    {
                        OrderId = order.Id,
                        Status = newStatus
                    };

                var success = await OrderService.UpdateOrderStatusAsync(command);
                if (success)
                {
                    order.Status = newStatus;
                    StateHasChanged();
                }
                // Optionally handle failure (e.g., show a message)
            }
        }
        catch (Exception ex)
        {
            // Handle exceptions (e.g., log error, show message)
            Console.Error.WriteLine($"Error updating order status: {ex.Message}");
        }
        finally
        {
            isUpdating = false;
        }
    }

    private string GetOrderActionText(OrderStatus status)
    {
        return status switch
        {
            OrderStatus.Confirmed => "Atender",
            OrderStatus.Processing => "Entregar",
            _ => ""
        };
    }

    private string GetOrderActionIcon(OrderStatus status)
    {
        return status switch
        {
            OrderStatus.Confirmed => Icons.Material.Filled.PlayArrow,
            OrderStatus.Processing => Icons.Material.Filled.LocalShipping,
            _ => ""
        };
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }

    private string GetOrderButtonStyle(OrderStatus status)
    {
        return status == OrderStatus.Shipped
            ? "min-width: 120px; display:none;"
            : "min-width: 120px;";
    }

    // New methods for MudDropContainer Kanban
    private string GetOrderStatus(OrderStatus status)
    {
        return status.ToString();
    }

    private OrderStatus ParseOrderStatus(string statusString)
    {
        return Enum.Parse<OrderStatus>(statusString);
    }

    private IEnumerable<OrderDto> GetOrdersByStatus(OrderStatus status)
    {
        return Orders?.Where(o => o.Status == status).OrderBy(o => o.OrderDate) ?? Enumerable.Empty<OrderDto>();
    }

    private string GetSectionHeaderClass(OrderStatus status)
    {
        return status switch
        {
            OrderStatus.Confirmed => "confirmed-section-header",
            OrderStatus.Processing => "processing-section-header",
            OrderStatus.Shipped => "shipped-section-header",
            _ => ""
        };
    }

    private string GetSectionIcon(OrderStatus status)
    {
        return status switch
        {
            OrderStatus.Confirmed => Icons.Material.Filled.CheckCircle,
            OrderStatus.Processing => Icons.Material.Filled.Autorenew,
            OrderStatus.Shipped => Icons.Material.Filled.LocalShipping,
            _ => Icons.Material.Filled.Circle
        };
    }

    private bool CanMoveToNextStatus(OrderStatus currentStatus)
    {
        return currentStatus == OrderStatus.Confirmed || currentStatus == OrderStatus.Processing;
    }

    private OrderStatus GetNextStatus(OrderStatus currentStatus)
    {
        return currentStatus switch
        {
            OrderStatus.Confirmed => OrderStatus.Processing,
            OrderStatus.Processing => OrderStatus.Shipped,
            _ => currentStatus
        };
    }

    private string GetStatusActionText(OrderStatus status)
    {
        return status switch
        {
            OrderStatus.Confirmed => "Processar",
            OrderStatus.Processing => "Enviar",
            _ => ""
        };
    }

    private string GetStatusActionIcon(OrderStatus status)
    {
        return status switch
        {
            OrderStatus.Confirmed => Icons.Material.Filled.PlayArrow,
            OrderStatus.Processing => Icons.Material.Filled.LocalShipping,
            _ => ""
        };
    }

    private async Task MoveOrderToNextStatus(OrderDto order)
    {
        if (!CanMoveToNextStatus(order.Status) || isUpdating)
            return;

        try
        {
            isUpdating = true;
            var newStatus = GetNextStatus(order.Status);

            await UpdateOrderStatusInternal(order, newStatus);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error moving order to next status: {ex.Message}");
            Snackbar.Add("Erro ao atualizar status do pedido", Severity.Error);
        }
        finally
        {
            isUpdating = false;
        }
    }

    private bool IsValidStatusTransition(OrderStatus from, OrderStatus to)
    {
        return (from, to) switch
        {
            (OrderStatus.Confirmed, OrderStatus.Processing) => true,
            (OrderStatus.Processing, OrderStatus.Shipped) => true,
            (OrderStatus.Processing, OrderStatus.Confirmed) => true, // Allow backward movement
            (OrderStatus.Shipped, OrderStatus.Processing) => true, // Allow backward movement
            _ => false
        };
    }

    private async Task UpdateOrderStatusInternal(OrderDto order, OrderStatus newStatus)
    {
        var command = new UpdateOrderStatusCommand
        {
            OrderId = order.Id,
            Status = newStatus
        };

        var success = await OrderService.UpdateOrderStatusAsync(command);
        if (success)
        {
            order.Status = newStatus;
            _dropContainer?.Refresh();
            StateHasChanged();
        }
        else
        {
            Snackbar.Add("Falha ao atualizar status do pedido", Severity.Error);
        }
    }

    private string GetOrderCardCssClass(OrderStatus status)
    {
        return status switch
        {
            OrderStatus.Confirmed => "order-card order-card-confirmed",
            OrderStatus.Processing => "order-card order-card-processing",
            OrderStatus.Shipped => "order-card order-card-shipped",
            _ => "order-card"
        };
    }

    private Color GetNextStatusButtonColor(OrderStatus currentStatus)
    {
        var nextStatus = GetNextStatus(currentStatus);
        return nextStatus switch
        {
            OrderStatus.Processing => Color.Warning,
            OrderStatus.Shipped => Color.Success,
            _ => Color.Primary
        };
    }
}