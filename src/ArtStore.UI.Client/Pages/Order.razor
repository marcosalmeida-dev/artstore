@page "/"

@using System.Collections.Generic
@using System.Linq
@using System.Globalization
@using ArtStore.Shared.DTOs.Product
@using ArtStore.Shared.DTOs.Category
@using ArtStore.UI.Client.Services

@inject IJSRuntime JSRuntime
@inject ProductService ProductService
@inject IDialogService DialogService

<PageTitle>@GetLocalizedText("PageTitle")</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="py-8">
    <!-- Language Selector -->
    <MudPaper Elevation="2" Class="pa-4 mb-6">
        <MudGrid AlignItems="Center" Justify="Justify.SpaceBetween">
            <MudItem xs="12" md="6">
                <MudText Typo="Typo.h3" Color="Color.Primary" Class="fw-bold">
                    @GetLocalizedText("RestaurantName")
                </MudText>
                <MudText Typo="Typo.subtitle1" Color="Color.Secondary">
                    @GetLocalizedText("RestaurantTagline")
                </MudText>
            </MudItem>
            <MudItem xs="12" md="6">
                <MudGrid Justify="Justify.FlexEnd">
                    <MudItem>
                        <MudText Typo="Typo.body2" Class="mb-2">@GetLocalizedText("SelectLanguage")</MudText>
                        <MudButtonGroup @key="currentLanguage" Color="Color.Primary" Variant="Variant.Outlined" Size="Size.Medium"
                                        OverrideStyles="false">
                            <MudButton OnClick="@(() => ChangeLanguage(PORTUGUESE))"
                                       Color="@(currentLanguage == PORTUGUESE ? Color.Primary : Color.Default)"
                                       Variant="@(currentLanguage == PORTUGUESE ? Variant.Filled : Variant.Outlined)"
                                       StartIcon="@GetFlagIcon(PORTUGUESE)" Size="Size.Medium">
                                BR
                            </MudButton>
                            <MudButton OnClick="@(() => ChangeLanguage(ENGLISH))"
                                       Color="@(currentLanguage == ENGLISH ? Color.Primary : Color.Default)"
                                       Variant="@(currentLanguage == ENGLISH ? Variant.Filled : Variant.Outlined)"
                                       StartIcon="@GetFlagIcon(ENGLISH)" Size="Size.Medium">
                                EN
                            </MudButton>
                            <MudButton OnClick="@(() => ChangeLanguage(SPANISH))"
                                       Color="@(currentLanguage == SPANISH ? Color.Primary : Color.Default)"
                                       Variant="@(currentLanguage == SPANISH ? Variant.Filled : Variant.Outlined)"
                                       StartIcon="@GetFlagIcon(SPANISH)" Size="Size.Medium">
                                AR
                            </MudButton>
                        </MudButtonGroup>
                    </MudItem>
                </MudGrid>
            </MudItem>
        </MudGrid>
    </MudPaper>

    <!-- Category Filter -->
    <MudPaper Elevation="1" Class="pa-4 mb-6">
        <MudText Typo="Typo.h6" Class="mb-3">@GetLocalizedText("FilterByCategory")</MudText>
        <MudChipSet @bind-SelectedValues="selectedCategories" SelectionMode="SelectionMode.MultiSelection" CheckMark="true" Variant="Variant.Text" Color="Color.Info">
            @foreach (var category in GetCategories())
            {
                <MudChip Value="@category" Icon="@GetCategoryIcon(category)">
                    @GetLocalizedCategory(category)
                </MudChip>
            }
        </MudChipSet>
    </MudPaper>

    <!-- Menu Categories -->
    @foreach (var category in GetVisibleCategories())
    {
        var categoryProducts = GetProductsByCategory(category);
        if (categoryProducts.Any())
        {
            <MudPaper Elevation="1" Class="pa-6 mb-6">
                <MudText Typo="Typo.h4" Color="Color.Primary" Class="mb-4 text-center">
                    <MudIcon Icon="@GetCategoryIcon(category)" Class="mr-2" />
                    @GetLocalizedCategory(category)
                </MudText>

                <MudGrid>
                    @foreach (var product in categoryProducts)
                    {
                        <MudItem xs="12" md="6" lg="4">
                            <MudCard Elevation="2" Class="product-card" Style="transition: all 0.2s ease; cursor: pointer;"
                                     @onclick="() => ToggleSelection(product)">
                                <div Class="@(IsSelected(product) ? "selected-card" : "hover-card") product-card-inner">
                                    <div class="product-image-container">
                                        @if (product.ImageDtos?.Any() == true)
                                        {
                                            <div class="selected-indicator">
                                                <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Primary" Size="Size.Large" />
                                            </div>
                                            <MudAnimate @ref="_animate" Selector=".id2" Duration="1" AnimationType="AnimationType.Fade" Value="_value2" ValueSecondary="0" Infinite="false"
                                                        KeyframeAdvanced="@KeyframeBuilder.Build(2, new List<string>() {"0", $"{_value2}"}, string.Join(" ", _animationTypes))" />
                                            <MudCardMedia Class="id2" Image="@product.PrimaryImageUrl" Height="200" />
                                        }
                                        else
                                        {
                                            <div class="product-placeholder-image">
                                                <MudIcon Icon="@Icons.Material.Filled.ImageNotSupported" Size="Size.Large" Color="Color.Tertiary" />
                                            </div>
                                        }
                                    </div>

                                    <MudCardContent Class="product-content">
                                        <div class="product-header">
                                            <MudText Typo="Typo.h6" Color="Color.Primary" Class="fw-bold product-name">
                                                @product.Name
                                            </MudText>
                                            <MudText Typo="Typo.h6" Color="Color.Success" Class="fw-bold product-price">
                                                @FormatPrice(product.Price)
                                            </MudText>
                                        </div>

                                        <MudText Typo="Typo.body2" Class="product-description">
                                            @product.Description
                                        </MudText>

                                        @if (product.Unit != null)
                                        {
                                            <MudText Typo="Typo.caption" Color="Color.Dark" Class="product-unit">
                                                @product.Unit
                                            </MudText>
                                        }
                                    </MudCardContent>

                                    <MudCardActions Class="product-actions">
                                        @if (IsSelected(product))
                                        {
                                            <div class="d-flex align-center justify-space-between" style="width: 100%;" @onclick:stopPropagation>
                                                <div class="d-flex align-center">
                                                    <MudIconButton Icon="@Icons.Material.Filled.Remove"
                                                                   Color="Color.Primary"
                                                                   Size="Size.Small"
                                                                   OnClick="@(() => DecreaseItemCount(product))"
                                                                   Disabled="@(GetItemCount(product) < 1)" />

                                                    <MudTextField T="int"
                                                                  Value="@GetItemCount(product)"
                                                                  ValueChanged="@((int val) => UpdateItemCount(product, val))"
                                                                  Style="width: 60px; margin: 0 8px; text-align: center;"
                                                                  Variant="Variant.Outlined"
                                                                  Adornment="Adornment.None"
                                                                  InputMode="InputMode.numeric" />

                                                    <MudIconButton Icon="@Icons.Material.Filled.Add"
                                                                   Color="Color.Primary"
                                                                   Size="Size.Small"
                                                                   OnClick="@(() => IncreaseItemCount(product))"
                                                                   Disabled="@(GetItemCount(product) > 9)" />
                                                </div>
                                                <MudIconButton Icon="@Icons.Material.Filled.Info"
                                                               Color="Color.Secondary"
                                                               Size="Size.Small"
                                                               Class="product-info-button"
                                                               OnClick="@(() => OpenNutritionDialog(product))" />
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="d-flex align-center justify-space-between" style="width: 100%;">
                                                <MudButton Variant="Variant.Filled"
                                                           Color="Color.Primary"
                                                           FullWidth="false"
                                                           StartIcon="@Icons.Material.Filled.ShoppingCart"
                                                           @onclick="() => ToggleSelection(product)">
                                                    @GetLocalizedText("AddToOrder")
                                                </MudButton>
                                                <MudIconButton Icon="@Icons.Material.Filled.Info"
                                                               Color="Color.Secondary"
                                                               Size="Size.Small"
                                                               Class="product-info-button"
                                                               OnClick="@(() => OpenNutritionDialog(product))" />
                                            </div>
                                        }
                                    </MudCardActions>
                                </div>
                            </MudCard>
                        </MudItem>
                    }
                </MudGrid>
            </MudPaper>
        }
    }
</MudContainer>

@if (SelectedItems.Count > 0)
{
    <div class="selection-popup-overlay">
        <div class="selection-popup mb-2 d-flex align-center">
            <MudPaper Class="px-6 py-4" Elevation="12" Style="border-radius: 8px; max-width: 400px; width: 100%;">
                <div class="d-flex flex-column">
                    <!-- Selected-item summary -->
                    <MudText Typo="Typo.body1">
                        <strong>@SelectedItems.Count</strong> @GetLocalizedText(SelectedItems.Count == 1 ? "Item" : "Items") @GetLocalizedText("Selected")
                    </MudText>
                    <MudText Typo="Typo.body2" Class="mt-1 mb-2">
                        @GetLocalizedText("TotalQuantity"): @GetTotalQuantity()
                    </MudText>
                    <MudText Typo="Typo.h6" Color="Color.Primary" Class="mb-3">
                        @GetLocalizedText("Total"): @FormatPrice(CalculateTotalPrice())
                    </MudText>

                    <MudDivider />

                    <!-- Actions at bottom -->
                    <div class="d-flex justify-end mt-3">
                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.Payment"
                                   OnClick="OpenPaymentDialog"
                                   Class="mr-2">
                            @GetLocalizedText("BuyNow")
                        </MudButton>
                        <MudButton Variant="Variant.Text"
                                   Color="Color.Dark"
                                   OnClick="ClearSelections">
                            @GetLocalizedText("Cancel")
                        </MudButton>
                    </div>
                </div>
            </MudPaper>
        </div>
    </div>
}

<style type="text/css">
        .product-card {
        height: 375px !important; /* Fixed height for all cards */
        display: flex;
        flex-direction: column;
    }

    .product-card-inner {
        height: 100%;
        display: flex;
        flex-direction: column;
    }

    .product-image-container {
        height: 200px;
        flex-shrink: 0;
        overflow: hidden;
    }

    .product-placeholder-image {
        height: 200px;
        background: #f5f5f5;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .product-content {
        flex-grow: 1;
        display: flex;
        flex-direction: column;
        padding: 12px !important;
        min-height: 0; /* Allow content to shrink */
        gap: 6px; /* Reduce spacing between elements */
    }

    .product-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        gap: 8px;
        margin-bottom: 4px;
    }

    .product-name {
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
        text-overflow: ellipsis;
        line-height: 1.2;
        max-height: 2.4em; /* 2 lines * 1.2 line height */
        word-break: break-word;
        flex: 1;
        min-width: 0; /* Allow text to shrink */
        margin: 0;
    }

    .product-price {
        white-space: nowrap;
        flex-shrink: 0;
        margin: 0;
        font-size: 0.95rem !important;
        min-width: fit-content;
    }

    .product-actions {
        flex-shrink: 0;
        min-height: 60px;
        padding: 12px !important;
        display: flex;
        align-items: center;
        margin-top: auto;
    }

    .product-info-button {
        opacity: 0.7;
        transition: opacity 0.2s ease;
    }

        .product-info-button:hover {
            opacity: 1;
        }

    .selected-card {
        position: relative;
        border: 2px solid var(--mud-palette-primary);
        transform: translateY(-2px);
        background-color: var(--mud-palette-primary-hover);
    }

    .selected-indicator {
        position: absolute;
        top: 8px;
        right: 8px;
        z-index: 10;
        background-color: transparent;
        border-radius: 50%;
    }

    .hover-card:hover {
        transform: translateY(-2px);
        transition: transform 0.3s ease;
    }

    .multi-select-card-container {
        padding: 16px 0;
        margin-bottom: 80px;
    }

    .selection-popup-overlay {
        position: fixed;
        bottom: 16px;
        left: 0;
        right: 0;
        z-index: 100;
        display: flex;
        justify-content: center;
        pointer-events: none;
    }

    .selection-popup {
        pointer-events: all;
        width: calc(100% - 32px);
        max-width: 500px;
    }

    /* Responsive adjustments */
    @@media (max-width: 960px) {
        .product-card {
            height: 425px !important;
        }
    }

    @@media (max-width: 600px) {
        .product-card {
            height: 375px !important;
        }

        .product-content {
            padding: 10px !important;
            gap: 4px;
        }

        .product-description {
            -webkit-line-clamp: 2;
            max-height: 2.6em; /* 2 lines * 1.3 line height */
        }

        .product-price {
            font-size: 0.9rem !important;
        }

        .product-actions {
            padding: 10px !important;
        }
    }

</style>

@code {
    // Animation properties
    MudAnimate? _animate = new();
    IEnumerable<string> _animationTypes = new List<string>() { KeyframePreset.Fade };
    double _value2 = 180;

    // Language constants
    private const string ENGLISH = "en-US";
    private const string PORTUGUESE = "pt-BR";
    private const string SPANISH = "es-AR";

    private string currentLanguage = PORTUGUESE; // Default to Portuguese
    private List<ProductDto> allProducts = new();
    private HashSet<int> SelectedItems = new HashSet<int>();
    private IReadOnlyCollection<string> selectedCategories = new HashSet<string>();

    // Nutrition dialog reference
    private IDialogReference? _nutritionDialogReference;

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        try
        {
            var products = await ProductService.GetProductsAsync(GetCultureCode(currentLanguage));

            // Filter out raw materials
            allProducts = products.Where(p => !p.CategoryIsRawMaterial).ToList();

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading products: {ex.Message}");
            // Fallback to empty list
            allProducts = new List<ProductDto>();
        }
    }

    private async Task ChangeLanguage(string language)
    {
        currentLanguage = language;
        selectedCategories = new HashSet<string>(); // Reset category filter
        await LoadProducts();
        StateHasChanged();
    }

    private string GetCultureCode(string language) => language switch
    {
        "pt-BR" => "pt-BR",
        "es-AR" => "es-AR",
        _ => "en-US"
    };

    private void ToggleSelection(ProductDto item)
    {
        if (SelectedItems.Contains(item.Id))
        {
            item.Quantity = 0;
            SelectedItems.Remove(item.Id);
        }
        else
        {
            SelectedItems.Add(item.Id);
            item.Quantity = 1; // Start with quantity 1
        }
        StateHasChanged();
    }

    private bool IsSelected(ProductDto item) => SelectedItems.Contains(item.Id);

    private async Task ClearSelections()
    {
        SelectedItems.Clear();
        foreach (var item in allProducts)
        {
            item.Quantity = 0;
        }
        StateHasChanged();
    }

    private decimal CalculateTotalPrice()
    {
        decimal total = 0;
        foreach (var id in SelectedItems)
        {
            var item = allProducts.FirstOrDefault(i => i.Id == id);
            if (item != null)
                total += item.Price * GetItemCount(item);
        }
        return total;
    }

    private int GetItemCount(ProductDto item) => item.Quantity;

    private void IncreaseItemCount(ProductDto item)
    {
        if (item.Quantity < 99)
        {
            item.Quantity++;
            StateHasChanged();
        }
    }

    private void DecreaseItemCount(ProductDto item)
    {
        item.Quantity--;
        if (item.Quantity < 1)
        {
            item.Quantity = 0;
            SelectedItems.Remove(item.Id);
        }
        StateHasChanged();
    }

    private void UpdateItemCount(ProductDto item, int value)
    {
        if (value < 1) value = 1;
        else if (value > 99) value = 99;
        item.Quantity = value;
        StateHasChanged();
    }

    private int GetTotalQuantity()
    {
        int total = 0;
        foreach (var id in SelectedItems)
        {
            var item = allProducts.FirstOrDefault(i => i.Id == id);
            if (item != null)
                total += item.Quantity;
        }
        return total;
    }

    private List<string> GetCategories()
    {
        return allProducts.Where(p => !string.IsNullOrEmpty(p.CategoryName))
                         .Select(p => p.CategoryName!)
                         .Distinct()
                         .ToList();
    }

    private List<string> GetVisibleCategories()
    {
        if (selectedCategories == null || !selectedCategories.Any())
        {
            return GetCategories();
        }
        return selectedCategories.ToList();
    }

    private List<ProductDto> GetProductsByCategory(string category)
    {
        return allProducts.Where(p => p.CategoryName == category).ToList();
    }

    private string GetFlagIcon(string language) => language switch
    {
        "en-US" => "<svg width='24' height='16' viewBox='0 0 24 16'><rect width='24' height='16' fill='#b22234'/><g><rect y='2' width='24' height='2' fill='#fff'/><rect y='6' width='24' height='2' fill='#fff'/><rect y='10' width='24' height='2' fill='#fff'/><rect y='14' width='24' height='2' fill='#fff'/></g><rect width='10' height='8' fill='#3c3b6e'/></svg>",
        "pt-BR" => "<svg width='24' height='16' viewBox='0 0 24 16'><rect width='24' height='16' fill='#009739'/><path d='M 3,8 L 12,2 L 21,8 L 12,14 Z' fill='#FEDD00'/><circle cx='12' cy='8' r='3.5' fill='#002776'/></svg>",
        "es-AR" => "<svg width='24' height='16' viewBox='0 0 24 16'><rect width='24' height='16' fill='#74acdf'/><rect y='5' width='24' height='6' fill='#fff'/><circle cx='12' cy='8' r='2' fill='#f6b40e'/></svg>",
        _ => "<svg width='24' height='16' viewBox='0 0 24 16'><circle cx='12' cy='8' r='7' fill='#bbb'/></svg>"
    };

    private string GetCategoryIcon(string category) => category switch
    {
        "Drinks" or "Bebidas" => Icons.Material.Filled.LocalBar,
        "Ice Slush Drinks" or "Bebidas Geladas" or "Bebidas Heladas" => Icons.Material.Filled.AcUnit,
        "Roast Pastry" or "Assados" or "Asados" => Icons.Material.Filled.LocalDining,
        _ => Icons.Material.Filled.MenuBook
    };

    private string GetLocalizedText(string key) => currentLanguage switch
    {
        "pt-BR" => key switch
        {
            "PageTitle" => "Faça seu Pedido",
            "RestaurantName" => "Cana Brasil",
            "RestaurantTagline" => "Sabores autênticos do Brasil",
            "SelectLanguage" => "Selecionar Idioma",
            "FilterByCategory" => "Filtrar por Categoria",
            "AllCategories" => "Todas as Categorias",
            "AddToOrder" => "Adicionar",
            "Selected" => "Selecionado",
            "Unit" => "Unidade",
            "Item" => "item",
            "Items" => "itens",
            "TotalQuantity" => "Quantidade total",
            "Total" => "Total",
            "BuyNow" => "Comprar Agora",
            "Cancel" => "Cancelar",
            _ => key
        },
        "es-AR" => key switch
        {
            "PageTitle" => "Haga su Pedido",
            "RestaurantName" => "Caña Argentina",
            "RestaurantTagline" => "Sabores auténticos de Argentina",
            "SelectLanguage" => "Seleccionar Idioma",
            "FilterByCategory" => "Filtrar por Categoría",
            "AllCategories" => "Todas las Categorías",
            "AddToOrder" => "Agregar",
            "Selected" => "Seleccionado",
            "Unit" => "Unidad",
            "Item" => "artículo",
            "Items" => "artículos",
            "TotalQuantity" => "Cantidad total",
            "Total" => "Total",
            "BuyNow" => "Comprar Ahora",
            "Cancel" => "Cancelar",
            _ => key
        },
        _ => key switch // en-US (default)
        {
            "PageTitle" => "Place Your Order",
            "RestaurantName" => "Sugarcane Express",
            "RestaurantTagline" => "Fresh flavors, authentic taste",
            "SelectLanguage" => "Select Language",
            "FilterByCategory" => "Filter by Category",
            "AllCategories" => "All Categories",
            "AddToOrder" => "Add",
            "Selected" => "Selected",
            "Unit" => "Unit",
            "Item" => "item",
            "Items" => "items",
            "TotalQuantity" => "Total quantity",
            "Total" => "Total",
            "BuyNow" => "Buy Now",
            "Cancel" => "Cancel",
            _ => key
        }
    };

    private string GetLocalizedCategory(string category) => currentLanguage switch
    {
        "pt-BR" => category switch
        {
            "Drinks" => "Bebidas",
            "Ice Slush Drinks" => "Bebidas Geladas",
            "Roast Pastry" => "Assados",
            _ => category
        },
        "es-AR" => category switch
        {
            "Drinks" => "Bebidas",
            "Ice Slush Drinks" => "Bebidas Heladas",
            "Roast Pastry" => "Asados",
            _ => category
        },
        _ => category // en-US (default)
    };

    private string FormatPrice(decimal price) => currentLanguage switch
    {
        "pt-BR" => price.ToString("C", new CultureInfo("pt-BR")),
        "es-AR" => price.ToString("C", new CultureInfo("es-AR")),
        _ => price.ToString("C", new CultureInfo("en-US"))
    };

    private IDialogReference? _paymentDialogReference;

    private async Task OpenPaymentDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true, BackdropClick = false };
        var parameters = new DialogParameters<PaymentCheckout>
        {
            { x => x.SelectedOrderItems, SelectedItems },
            { x => x.OrderItems, allProducts },
        };
        _paymentDialogReference = await DialogService.ShowAsync<PaymentCheckout>("Choose Payment Method", parameters, options);

        var result = await _paymentDialogReference.Result;

        if (!result.Canceled && result.Data is bool success && success)
        {
            await ClearSelections();
        }
    }

    // Nutrition Dialog Methods
    private async Task OpenNutritionDialog(ProductDto product)
    {
        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            CloseOnEscapeKey = true,
            CloseButton = true
        };
        var parameters = new DialogParameters<NutritionFacts>
        {
            { x => x.Product, product },
            { x => x.CurrentLanguage, currentLanguage }
        };
        _nutritionDialogReference = await DialogService.ShowAsync<NutritionFacts>("Nutrition Facts", parameters, options);

        var result = await _nutritionDialogReference.Result;
        // No need to handle result for this dialog as it's informational only
    }
}