@using System.ComponentModel.DataAnnotations
@using ArtStore.Shared.DTOs
@using ArtStore.Shared.DTOs.Coupon
@using ArtStore.Shared.DTOs.Coupon.Commands

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.LocalOffer" Class="mr-3" /> @(IsEditMode ? "Edit Coupon" : "Add Coupon")
        </MudText>
    </TitleContent>
    <DialogContent>
        <EditForm Model="@model" OnValidSubmit="Submit">
            <DataAnnotationsValidator />

            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudTextField Label="Code" @bind-Value="model.Code" For="@(() => model.Code)"
                                  Required="true" Counter="50" MaxLength="50"
                                  HelperText="Use uppercase letters and numbers only" />
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudTextField Label="Name" @bind-Value="model.Name" For="@(() => model.Name)"
                                  Required="true" Counter="200" MaxLength="200" />
                </MudItem>

                <MudItem xs="12">
                    <MudTextField Label="Description" @bind-Value="model.Description" For="@(() => model.Description)"
                                  Lines="3" Counter="500" MaxLength="500" />
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudSelect Label="Type" @bind-Value="model.Type" Required="true" T="CouponType">
                        <MudSelectItem Value="@CouponType.Percentage">Percentage</MudSelectItem>
                        <MudSelectItem Value="@CouponType.FixedAmount">Fixed Amount</MudSelectItem>
                        <MudSelectItem Value="@CouponType.FreeShipping">Free Shipping</MudSelectItem>
                    </MudSelect>
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudNumericField Label="@GetValueLabel()" @bind-Value="model.Value" For="@(() => model.Value)"
                                     Required="true" Min="0.01m" Format="F2" T="decimal" />
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudNumericField Label="Minimum Order Amount" @bind-Value="model.MinimumOrderAmount" For="@(() => model.MinimumOrderAmount)"
                                     Min="0m" Format="F2" T="decimal?" />
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudNumericField Label="Maximum Discount Amount" @bind-Value="model.MaximumDiscountAmount" For="@(() => model.MaximumDiscountAmount)"
                                     Min="0m" Format="F2" T="decimal?" />
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudNumericField Label="Usage Limit" @bind-Value="model.UsageLimit" For="@(() => model.UsageLimit)"
                                     Min="1" Format="N0" T="int?"
                                     HelperText="Leave empty for unlimited usage" />
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudDatePicker Label="Start Date" @bind-Date="startDate" For="@(() => startDate)"
                                   Required="true" />
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudDatePicker Label="End Date" @bind-Date="endDate" For="@(() => endDate)"
                                   Required="true" />
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudSwitch Label="Active" @bind-Value="model.IsActive" Color="Color.Primary" />
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudSwitch Label="Once Per Customer" @bind-Value="model.IsOncePerCustomer" Color="Color.Primary"
                               HelperText="Limit one use per customer" />
                </MudItem>
            </MudGrid>

            <ValidationSummary />
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Submit" Disabled="@saving">
            @if (saving)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                <MudText Class="ms-2">@(IsEditMode ? "Updating..." : "Creating...")</MudText>
            }
            else
            {
                <MudText>@(IsEditMode ? "Update" : "Create")</MudText>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@inject ISnackbar Snackbar
@inject HttpClient httpClient

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public CouponDto? Coupon { get; set; }

    private AddEditCouponCommand model = new();
    private bool saving = false;
    private DateTime? startDate;
    private DateTime? endDate;

    private bool IsEditMode => Coupon != null;

    protected override async Task OnInitializedAsync()
    {
        if (IsEditMode && Coupon != null)
        {
            model = new AddEditCouponCommand
            {
                Id = Coupon.Id,
                Code = Coupon.Code,
                Name = Coupon.Name,
                Description = Coupon.Description,
                Type = Coupon.Type,
                Value = Coupon.Value,
                MinimumOrderAmount = Coupon.MinimumOrderAmount,
                MaximumDiscountAmount = Coupon.MaximumDiscountAmount,
                UsageLimit = Coupon.UsageLimit,
                StartDate = Coupon.StartDate,
                EndDate = Coupon.EndDate,
                IsActive = Coupon.IsActive,
                IsOncePerCustomer = Coupon.IsOncePerCustomer
            };

            startDate = Coupon.StartDate.Date;
            endDate = Coupon.EndDate.Date;
        }
        else
        {
            startDate = DateTime.Today;
            endDate = DateTime.Today.AddDays(30);
        }
    }

    private async Task Submit()
    {
        if (startDate.HasValue)
        {
            model.StartDate = startDate.Value;
        }

        if (endDate.HasValue)
        {
            model.EndDate = endDate.Value.Date.AddDays(1).AddTicks(-1); // End of day
        }

        saving = true;
        try
        {
            HttpResponseMessage response;

            if (IsEditMode)
            {
                response = await httpClient.PutAsJsonAsync($"/api/admin/coupons/{model.Id}", model);
            }
            else
            {
                response = await httpClient.PostAsJsonAsync("/api/admin/coupons", model);
            }

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<Result<int?>>();
                if (result?.Succeeded == true)
                {
                    MudDialog.Close(DialogResult.Ok(true));
                }
                else
                {
                    var errorMessage = result?.ErrorMessage ?? "Unknown error occurred";
                    Snackbar.Add($"Error: {errorMessage}", Severity.Error);
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Error: {errorContent}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error saving coupon: {ex.Message}", Severity.Error);
        }
        finally
        {
            saving = false;
        }
    }

    private void Cancel() => MudDialog.Cancel();

    private string GetValueLabel()
    {
        return model.Type switch
        {
            CouponType.Percentage => "Percentage (%)",
            CouponType.FixedAmount => "Fixed Amount",
            CouponType.FreeShipping => "Shipping Discount",
            _ => "Value"
        };
    }
}