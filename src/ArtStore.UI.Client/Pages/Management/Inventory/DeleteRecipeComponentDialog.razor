@using ArtStore.Shared.DTOs.Inventory

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Delete" Class="mr-3" Color="Color.Error" /> Delete Recipe Component
        </MudText>
    </TitleContent>
    <DialogContent>
        <div class="d-flex align-center mb-4">
            <MudIcon Icon="@Icons.Material.Filled.Warning" Color="Color.Warning" Size="Size.Large" Class="mr-3" />
            <div>
                <MudText Typo="Typo.body1">Are you sure you want to delete this recipe component?</MudText>
                <MudText Typo="Typo.body2" Class="mud-text-secondary mt-1">
                    This action will permanently remove the component from the recipe.
                </MudText>
            </div>
        </div>

        @if (Component != null)
        {
            <MudAlert Severity="Severity.Info" Class="mb-3">
                <MudText>Product: <strong>@Component.ProductName</strong></MudText>
                <MudText Class="mt-1">Component: <strong>@Component.ComponentProductName</strong></MudText>
                <MudText Class="mt-1">Quantity: <strong>@Component.Quantity.ToString("N3") @Component.Unit.ToString()</strong></MudText>
            </MudAlert>
        }

        <MudAlert Severity="Severity.Warning" Class="mb-3">
            <MudText><strong>Warning:</strong> Deleting this component will affect the recipe.</MudText>
            <MudText Class="mt-1">This may impact inventory calculations and production planning.</MudText>
        </MudAlert>

        <MudAlert Severity="Severity.Error" Class="mb-3">
            <MudText><strong>Warning:</strong> This action cannot be undone.</MudText>
        </MudAlert>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Error" Variant="Variant.Filled" OnClick="Delete" Disabled="@deleting">
            @if (deleting)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                <MudText Class="ms-2">Deleting...</MudText>
            }
            else
            {
                <MudText>Delete</MudText>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@inject ISnackbar Snackbar
@inject HttpClient HttpClient

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public RecipeComponentDto? Component { get; set; }

    private bool deleting = false;

    private async Task Delete()
    {
        if (Component == null) return;

        deleting = true;
        try
        {
            var response = await HttpClient.DeleteAsync($"/api/admin/recipecomponents/{Component.Id}");

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<Result<long>>();
                if (result?.Succeeded == true)
                {
                    MudDialog.Close(DialogResult.Ok(true));
                }
                else
                {
                    var errorMessage = result?.ErrorMessage ?? "Unknown error occurred";
                    Snackbar.Add($"Error: {errorMessage}", Severity.Error);
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Error deleting component: {errorContent}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error deleting component: {ex.Message}", Severity.Error);
        }
        finally
        {
            deleting = false;
        }
    }

    private void Cancel() => MudDialog.Cancel();
}