@using System.ComponentModel.DataAnnotations
@using ArtStore.Shared.DTOs
@using ArtStore.Shared.DTOs.Inventory
@using ArtStore.Shared.DTOs.Inventory.Commands

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Warehouse" Class="mr-3" /> @(IsEditMode ? "Edit Location" : "Add Location")
        </MudText>
    </TitleContent>
    <DialogContent>
        <EditForm Model="@model" OnValidSubmit="Submit">
            <DataAnnotationsValidator />

            <MudGrid>
                <MudItem xs="12">
                    <MudTextField Label="Name" @bind-Value="model.Name" For="@(() => model.Name)"
                                  Required="true" Counter="128" MaxLength="128" />
                </MudItem>

                <MudItem xs="12">
                    <MudTextField Label="Code" @bind-Value="model.Code" For="@(() => model.Code)"
                                  Counter="32" MaxLength="32"
                                  HelperText="Optional unique code (e.g., MAIN, WH01)" />
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudSwitch Label="Default Location" @bind-Value="model.IsDefault" Color="Color.Primary"
                               HelperText="Set as the default inventory location" />
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudSwitch Label="Active" @bind-Value="model.IsActive" Color="Color.Primary" />
                </MudItem>
            </MudGrid>

            <ValidationSummary />
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Submit" Disabled="@saving">
            @if (saving)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                <MudText Class="ms-2">@(IsEditMode ? "Updating..." : "Creating...")</MudText>
            }
            else
            {
                <MudText>@(IsEditMode ? "Update" : "Create")</MudText>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@inject ISnackbar Snackbar
@inject HttpClient httpClient

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public InventoryLocationDto? Location { get; set; }

    private AddEditInventoryLocationCommand model = new();
    private bool saving = false;

    private bool IsEditMode => Location != null;

    protected override async Task OnInitializedAsync()
    {
        if (IsEditMode && Location != null)
        {
            model = new AddEditInventoryLocationCommand
            {
                Id = Location.Id,
                Name = Location.Name,
                Code = Location.Code,
                IsDefault = Location.IsDefault,
                IsActive = Location.IsActive
            };
        }
        else
        {
            model.IsActive = true;
        }
    }

    private async Task Submit()
    {
        saving = true;
        try
        {
            HttpResponseMessage response;

            if (IsEditMode)
            {
                response = await httpClient.PutAsJsonAsync($"/api/admin/inventorylocations/{model.Id}", model);
            }
            else
            {
                response = await httpClient.PostAsJsonAsync("/api/admin/inventorylocations", model);
            }

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<Result<int?>>();
                if (result?.Succeeded == true)
                {
                    MudDialog.Close(DialogResult.Ok(true));
                }
                else
                {
                    var errorMessage = result?.ErrorMessage ?? "Unknown error occurred";
                    Snackbar.Add($"Error: {errorMessage}", Severity.Error);
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Error: {errorContent}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error saving location: {ex.Message}", Severity.Error);
        }
        finally
        {
            saving = false;
        }
    }

    private void Cancel() => MudDialog.Cancel();
}