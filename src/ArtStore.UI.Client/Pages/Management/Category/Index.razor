@page "/management/categories"
@using ArtStore.Shared.DTOs.Category
@using Microsoft.AspNetCore.Authorization

@* @attribute [Authorize(Roles = "Admin")] *@

<PageTitle>Category Management</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <div class="d-flex justify-space-between align-center mb-4">
        <MudText Typo="Typo.h4">Category Management</MudText>
        <MudButton StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" Variant="Variant.Filled" OnClick="OpenCreateDialog">
            Add Category
        </MudButton>
    </div>

    <MudPaper Class="pa-4">
        <div class="d-flex gap-4 mb-4">
            <MudTextField @bind-Value="_searchString" Label="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"
                          OnKeyDown="@(async (e) => { if (e.Key == "Enter") await SearchCategories(); })" />
            <MudSelect @bind-Value="_isActiveFilter" Label="Status" Clearable="true" T="bool?">
                <MudSelectItem Value="@((bool?)true)">Active</MudSelectItem>
                <MudSelectItem Value="@((bool?)false)">Inactive</MudSelectItem>
            </MudSelect>
            <MudButton Color="Color.Primary" OnClick="SearchCategories">Search</MudButton>
            <MudButton Color="Color.Secondary" OnClick="ClearFilters">Clear</MudButton>
        </div>

        <MudDataGrid T="CategoryDto" Items="@_categories" Loading="@_loading">
            <Columns>
                <PropertyColumn Property="x => x.Name" Title="Name" />
                <PropertyColumn Property="x => x.Description" Title="Description" />
                <PropertyColumn Property="x => x.ParentCategoryName" Title="Parent Category" />
                <TemplateColumn Title="Status">
                    <CellTemplate>
                        <MudChip Color="@(context.Item.IsActive? Color.Success: Color.Error)" Size="Size.Small">
                            @(context.Item.IsActive ? "Active" : "Inactive")
                        </MudChip>
                    </CellTemplate>
                </TemplateColumn>
                <PropertyColumn Property="x => x.ProductCount" Title="Products" />
                <PropertyColumn Property="x => x.Created" Title="Created" Format="dd/MM/yyyy" />
                <TemplateColumn Title="Actions" CellClass="d-flex justify-end">
                    <CellTemplate>
                        <div class="d-flex gap-2">
                            <MudButton Size="Size.Small" Variant="Variant.Text" Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.Edit"
                                       OnClick="@((e) => OpenEditDialog(context.Item))">
                                Edit
                            </MudButton>
                            <MudButton Size="Size.Small" Variant="Variant.Text" Color="Color.Error"
                                       StartIcon="@Icons.Material.Filled.Delete"
                                       OnClick="@((e) => DeleteCategory(context.Item))"
                                       Disabled="@(context.Item.ProductCount > 0)">
                                Delete
                            </MudButton>
                        </div>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
    </MudPaper>
</MudContainer>


@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject HttpClient HttpClient

@code {
    private List<CategoryDto> _categories = new();
    private bool _loading = false;
    private string _searchString = "";
    private bool? _isActiveFilter = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
    }

    private async Task LoadCategories()
    {
        _loading = true;
        try
        {
            StateHasChanged();
            var response = await HttpClient.GetFromJsonAsync<List<CategoryDto>>("/api/admin/categories");
            _categories = response ?? new List<CategoryDto>();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error _loading categories: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private async Task SearchCategories()
    {
        _loading = true;
        try
        {
            var query = $"/api/admin/categories/search?searchString={_searchString}";
            if (_isActiveFilter.HasValue)
                query += $"&isActive={_isActiveFilter.Value}";

            var response = await HttpClient.GetFromJsonAsync<PaginatedDataDto<CategoryDto>>(query);
            _categories = response?.Items?.ToList() ?? new List<CategoryDto>();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error searching categories: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task ClearFilters()
    {
        _searchString = "";
        _isActiveFilter = null;
        await LoadCategories();
    }

    private async Task OpenCreateDialog()
    {
        var dialog = await DialogService.ShowAsync<CategoryDialog>("Add Category");
        var result = await dialog.Result;

        if (result is not null && !result.Canceled)
        {
            await LoadCategories();
            Snackbar.Add("Category created successfully", Severity.Success);
        }
    }

    private async Task OpenEditDialog(CategoryDto category)
    {
        try
        {
            // Debug log
            Snackbar.Add($"Opening edit dialog for: {category.Name}", Severity.Info);

            var parameters = new DialogParameters { ["Category"] = category };
            var dialog = await DialogService.ShowAsync<CategoryDialog>("Edit Category", parameters);
            var result = await dialog.Result;

            if (result is not null && !result.Canceled)
            {
                await LoadCategories();
                Snackbar.Add("Category updated successfully", Severity.Success);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error opening edit dialog: {ex.Message}", Severity.Error);
        }
    }

    private async Task DeleteCategory(CategoryDto category)
    {
        var parameters = new DialogParameters { ["Category"] = category };
        var dialog = await DialogService.ShowAsync<DeleteCategoryDialog>("Delete Category", parameters);
        var result = await dialog.Result;

        if (result is not null && !result.Canceled)
        {
            await LoadCategories();
            Snackbar.Add("Category deleted successfully", Severity.Success);
        }
    }
}