@using ArtStore.Shared.DTOs.Category

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Delete" Class="mr-3" Color="Color.Error" /> Delete Category
        </MudText>
    </TitleContent>
    <DialogContent>
        <div class="d-flex align-center mb-4">
            <MudIcon Icon="@Icons.Material.Filled.Warning" Color="Color.Warning" Size="Size.Large" Class="mr-3" />
            <div>
                <MudText Typo="Typo.body1">Are you sure you want to delete the category <strong>"@Category?.Name"</strong>?</MudText>
                <MudText Typo="Typo.body2" Class="mud-text-secondary mt-1">
                    This action will soft delete the category and it will no longer be visible in the system.
                </MudText>
            </div>
        </div>

        @if (Category?.ProductCount > 0)
        {
            <MudAlert Severity="Severity.Warning" Class="mb-3">
                <MudText>This category has <strong>@Category.ProductCount products</strong> associated with it.</MudText>
                <MudText Class="mt-1">The category cannot be deleted until all products are moved to another category.</MudText>
            </MudAlert>
        }

        @if (Category?.SubCategories?.Count > 0)
        {
            <MudAlert Severity="Severity.Info" Class="mb-3">
                <MudText>This category has <strong>@Category.SubCategories.Count subcategories</strong>.</MudText>
                <MudText Class="mt-1">All subcategories will become top-level categories after deletion.</MudText>
            </MudAlert>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Error" Variant="Variant.Filled" OnClick="Delete" 
                   Disabled="@(deleting || Category?.ProductCount > 0)">
            @if (deleting)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                <MudText Class="ms-2">Deleting...</MudText>
            }
            else
            {
                <MudText>Delete</MudText>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@inject ISnackbar Snackbar
@inject HttpClient HttpClient

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public CategoryDto? Category { get; set; }

    private bool deleting = false;

    private async Task Delete()
    {
        if (Category == null) return;

        deleting = true;
        try
        {
            var response = await HttpClient.DeleteAsync($"/api/admin/categories/{Category.Id}");

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<Result<int>>();
                if (result?.Succeeded == true)
                {
                    MudDialog.Close(DialogResult.Ok(true));
                }
                else
                {
                    // var errorMessage = result?.ErrorMessage ?? "Unknown error occurred";
                    // Snackbar.Add($"Error deleting category: {errorMessage}", Severity.Error);
                    var errorContent = await response.Content.ReadAsStringAsync();
                    Snackbar.Add($"Error: {errorContent}", Severity.Error);
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Error deleting category: {errorContent}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error deleting category: {ex.Message}", Severity.Error);
        }
        finally
        {
            deleting = false;
        }
    }

    private void Cancel() => MudDialog.Cancel();
}