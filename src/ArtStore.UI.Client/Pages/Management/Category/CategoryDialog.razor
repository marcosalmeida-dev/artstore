@using System.ComponentModel.DataAnnotations
@using ArtStore.Shared.DTOs
@using ArtStore.Shared.DTOs.Category
@using ArtStore.Shared.DTOs.Category.Commands

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Category" Class="mr-3" /> @(IsEditMode ? "Edit Category" : "Add Category")
        </MudText>
    </TitleContent>
    <DialogContent>
        <EditForm Model="@model" OnValidSubmit="Submit">
            <DataAnnotationsValidator />
            
            <MudGrid>
                <MudItem xs="12">
                    <MudTextField Label="Name" @bind-Value="model.Name" For="@(() => model.Name)" 
                                  Required="true" Counter="100" MaxLength="100" />
                </MudItem>
                
                <MudItem xs="12">
                    <MudTextField Label="Description" @bind-Value="model.Description" For="@(() => model.Description)"
                                  Lines="3" Counter="500" MaxLength="500" />
                </MudItem>
                
                <MudItem xs="12" md="6">
                    <MudSelect Label="Parent Category" @bind-Value="model.ParentCategoryId" Clearable="true" T="int?">
                        @foreach (var category in parentCategories.Where(c => c.Id != model.Id))
                        {
                            <MudSelectItem Value="@((int?)category.Id)">@GetCategoryDisplayName(category)</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                
                <MudItem xs="12" md="6">
                    <MudSwitch Label="Active" @bind-Value="model.IsActive" Color="Color.Primary" />
                </MudItem>
            </MudGrid>
            
            <ValidationSummary />
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Submit" Disabled="@saving">
            @if (saving)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                <MudText Class="ms-2">@(IsEditMode ? "Updating..." : "Creating...")</MudText>
            }
            else
            {
                <MudText>@(IsEditMode ? "Update" : "Create")</MudText>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@inject ISnackbar Snackbar
@inject HttpClient httpClient

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public CategoryDto? Category { get; set; }

    private CategoryDto model = new();
    private List<CategoryDto> parentCategories = new();
    private bool saving = false;
    
    private bool IsEditMode => Category != null;

    protected override async Task OnInitializedAsync()
    {
        await LoadParentCategories();
        
        if (IsEditMode && Category != null)
        {
            model = new CategoryDto
            {
                Id = Category.Id,
                Name = Category.Name,
                Description = Category.Description,
                IsActive = Category.IsActive,
                ParentCategoryId = Category.ParentCategoryId
            };
        }
    }

    private async Task LoadParentCategories()
    {
        try
        {
            var response = await httpClient.GetFromJsonAsync<List<CategoryDto>>("/api/admin/categories");
            parentCategories = response ?? new List<CategoryDto>();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading parent categories: {ex.Message}", Severity.Error);
        }
    }

    private async Task Submit()
    {
        saving = true;
        try
        {
            var command = new AddEditCategoryCommand
            {
                Id = model.Id,
                Name = model.Name,
                Description = model.Description,
                IsActive = model.IsActive,
                ParentCategoryId = model.ParentCategoryId
            };

            HttpResponseMessage response;
            
            if (IsEditMode)
            {
                response = await httpClient.PutAsJsonAsync($"/api/admin/categories/{model.Id}", command);
            }
            else
            {
                response = await httpClient.PostAsJsonAsync("/api/admin/categories", command);
            }

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<Result<int?>>();
                if (result?.Succeeded == true)
                {
                    MudDialog.Close(DialogResult.Ok(true));
                }
                else
                {
                    var errorMessage = result?.ErrorMessage ?? "Unknown error occurred";
                    Snackbar.Add($"Error: {errorMessage}", Severity.Error);
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Error: {errorContent}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error saving category: {ex.Message}", Severity.Error);
        }
        finally
        {
            saving = false;
        }
    }

    private void Cancel() => MudDialog.Cancel();

    private string GetCategoryDisplayName(CategoryDto category)
    {
        if (category.ParentCategoryId == null)
            return category.Name;
        
        var parent = parentCategories.FirstOrDefault(c => c.Id == category.ParentCategoryId);
        return parent != null ? $"{parent.Name} > {category.Name}" : category.Name;
    }
}